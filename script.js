let xp = 0;
let health = 100;
let gold = 50;
let currentWeapon = 0;
let fighting;
let monsterHealth;
let inventory = ["–†–∂–∞–≤—ã–π –Ω–æ–∂"];

const button1 = document.querySelector('#button1');
const button2 = document.querySelector("#button2");
const button3 = document.querySelector("#button3");
const text = document.querySelector("#text");
const xpText = document.querySelector("#xpText");
const healthText = document.querySelector("#healthText");
const goldText = document.querySelector("#goldText");
const monsterStats = document.querySelector("#monsterStats");
const monsterName = document.querySelector("#monsterName");
const monsterHealthText = document.querySelector("#monsterHealth");
const weapons = [
  { name: '–†–∂–∞–≤—ã–π –Ω–æ–∂', power: 5 },
  { name: ' –ö–∏–Ω–∂–∞–ª', power: 30 },
  { name: ' –ë–æ–µ–≤–æ–π –º–æ–ª–æ—Ç', power: 50 },
  { name: ' –ú–µ—á –≥–µ—Ä–æ—è', power: 100 }
];
const monsters = [
  {
    name: "–ö—Ä—ã—Å–∞",
    level: 2,
    health: 15
  },
  {
    name: "–£–ø—ã—Ä—å",
    level: 8,
    health: 60
  },
  {
    name: "–î—Ä–∞–∫–æ–Ω",
    level: 20,
    health: 300
  }
]
const locations = [
  {
    name: "town square",
    "button text": ["–ó–∞–≥–ª—è–Ω—É—Ç—å –≤ –ª–∞–≤–∫—É", "–°–ø—É—Å—Ç–∏—Ç—å—Å—è –≤ –∫–∞—Ç–∞–∫–æ–º–±—ã", "–°—Ä–∞–∑–∏—Ç—å—Å—è —Å –¥—Ä–∞–∫–æ–Ω–æ–º"],
    "button functions": [goStore, goCave, fightDragon],
    text: "–í—ã –Ω–∞ –≥–æ—Ä–æ–¥—Å–∫–æ–π –ø–ª–æ—â–∞–¥–∏, –≤—ã –≤–∏–¥–∏—Ç–µ –∑–¥–∞–Ω–∏–µ —Å –≤—ã–≤–µ—Å–∫–æ–π \"–õ–∞–≤–∫–∞\"."
  },
  {
    name: "store",
    "button text": ["–û—Ç–¥–æ—Ö–Ω—É—Ç—å (10 –∑–æ–ª–æ—Ç—ã—Ö)", "–ö—É–ø–∏—Ç—å –æ—Ä—É–∂–∏–µ (30 –∑–æ–ª–æ—Ç—ã—Ö)", "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–æ—Ä–æ–¥—Å–∫—É—é –ø–ª–æ—â–∞–¥—å"],
    "button functions": [buyHealth, buyWeapon, goTown],
    text: '–í—ã –≤–æ—à–ª–∏ –≤ –ª–∞–≤–∫—É. –ù–∞ –ø—Ä–∏–ª–∞–≤–∫–µ –º–∏—Ä–Ω–æ –ø–æ—Å–∞–ø—ã–≤–∞–µ—Ç –∫–æ—Ç. \n –ü—Ä–æ–¥–∞–≤–µ—Ü –ø—Ä–∏–≤–µ—Ç–ª–∏–≤–æ —É–ª—ã–±–∞–µ—Ç—Å—è –≤–∞–º: "–ß—Ç–æ, —Ä–µ—à–∏–ª –æ–±–Ω–æ–≤–∏—Ç—å —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ, –∏–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–¥–æ—Ö–Ω—É—Ç—å?"'
  },
  {
    name: "cave",
    "button text": ["–°—Ä–∞–∑–∏—Ç—å—Å—è —Å –≥–∏–≥–∞–Ω—Ç—Å–∫–æ–π –∫—Ä—ã—Å–æ–π", "–°—Ä–∞–∑–∏—Ç—å—Å—è —Å —É–ø—ã—Ä–µ–º", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥"],
    "button functions": [fightSlime, fightBeast, goTown],
    text: "–í—ã –≤ –∫–∞—Ç–∞–∫–æ–º–±–∞—Ö, –∫—É–¥–∞ –≤–∞—Å –ø—Ä–∏–≤–µ–ª–∞ –≥–æ—Ä–æ–¥—Å–∫–∞—è –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è, –≤–æ–∫—Ä—É–≥ –≤–∞—Å –ª–∏—à—å –∑–∞–ø–∞—Ö –≥–Ω–∏–ª–∏ –∏ –∫—É—á–∞ –æ–∑–ª–æ–±–ª–µ–Ω–Ω—ã—Ö –≥–ª–∞–∑"
  },
  {
    name: "fight",
    "button text": ["–ê—Ç–∞–∫–æ–≤–∞—Ç—å", "–£–∫–ª–æ–Ω–∏—Ç—å—Å—è", "–í—ã–π—Ç–∏ –∏–∑ –±–æ—è"],
    "button functions": [attack, dodge, goTown],
    text: "–í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –±–∏—Ç–≤—É —Å –º–æ–Ω—Å—Ç—Ä–æ–º"
  },
  {
    name: "kill monster",
    "button text": ["–û—Å—Ç–∞—Ç—å—Å—è –≤ –∫–∞—Ç–∞–∫–æ–º–±–∞—Ö", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∞–≤–∫—É", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥"],
    "button functions": [goCave, goStore, goTown],
    text: '"–ê—Ä–≥—Ö—Ö—Ö!" –ü–æ—Å–ª–µ–¥–Ω–µ–µ —á—Ç–æ –∏–∑–¥–∞–µ—Ç –∏–∑ —Å–µ–±—è –ø–æ–≤–µ—Ä–∂–µ–Ω–Ω—ã–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥?'
  },
  {
    name: "lose",
    "button text": ["–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"],
    "button functions": [restart, restart, restart],
    text: "–í—ã –ø–æ–≥–∏–±–ª–∏. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ?"
  },
  { 
    name: "win", 
    "button text": ["–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"], 
    "button functions": [restart, easterEgg, restart], 
    text: "üéâ–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –¥—Ä–∞–∫–æ–Ω–∞! –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ?üéâ" 
  },
  {
    name: "easter egg",
    "button text": ["2", "8", "Go to town square?"],
    "button functions": [pickTwo, pickEight, goTown],
    text: "You find a secret game. Pick a number above. Ten numbers will be randomly chosen between 0 and 10. If the number you choose matches one of the random numbers, you win!"
  }
];

// initialize buttons
button1.onclick = goStore;
button2.onclick = goCave;
button3.onclick = fightDragon;

function update(location) {
  monsterStats.style.display = "none";
  button1.innerText = location["button text"][0];
  button2.innerText = location["button text"][1];
  button3.innerText = location["button text"][2];
  button1.onclick = location["button functions"][0];
  button2.onclick = location["button functions"][1];
  button3.onclick = location["button functions"][2];
  text.innerText = location.text;
}

function goTown() {
  update(locations[0]);
}

function goStore() {
  update(locations[1]);
}

function goCave() {
  update(locations[2]);
}

function buyHealth() {
  if (gold >= 10) {
    gold -= 10;
    health += 10;
    goldText.innerText = gold;
    healthText.innerText = health;
  } else {
    text.innerText = '"–ü–æ—à–µ–ª –ø—Ä–æ—á—å, –æ–±–æ—Ä–≤–∞–Ω–µ—Ü, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫–æ–≥–¥–∞ —É —Ç–µ–±—è –±—É–¥–µ—Ç —Ö–æ—Ç—è –±—ã 10 –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç!"';
  }
}

function buyWeapon() {
  if (currentWeapon < weapons.length - 1) {
    if (gold >= 30) {
      gold -= 30;
      currentWeapon++;
      goldText.innerText = gold;
      let newWeapon = weapons[currentWeapon].name;
      text.innerText = "–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏: " + newWeapon + ".";
      inventory.push(newWeapon);
      text.innerText += " –í –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ —Å–µ–π—á–∞—Å: " + inventory;
    } else {
      text.innerText = '"–≠–≥–µ-–µ, –Ω–µ, —ç—Ç–∞ —à—Ç—É–∫–∞ —Ç–µ–±–µ –Ω–µ –ø–æ –∫–∞—Ä–º–∞–Ω—É, –≥–µ—Ä–æ–π."';
    }
  } else {
    text.innerText = '"–ú–Ω–µ –±–æ–ª—å—à–µ –Ω–µ—á–µ–≥–æ —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å, –≥–µ—Ä–æ–π."';
    button2.innerText = "–ü—Ä–æ–¥–∞—Ç—å —Å—Ç–∞—Ä–æ–µ –æ—Ä—É–∂–∏–µ";
    button2.onclick = sellWeapon;
  }
}

function sellWeapon() {
  if (inventory.length > 1) {
    gold += 15;
    goldText.innerText = gold;
    let currentWeapon = inventory.shift();
    text.innerText = "–í—ã –ø—Ä–æ–¥–∞–ª–∏: " + currentWeapon + ".";
    text.innerText += " –í –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ —Å–µ–π—á–∞—Å: " + inventory;
  } else {
    text.innerText = '"–ò —á—Ç–æ —Ç—ã, –≥–æ–ª—ã–º–∏ —Ä—É–∫–∞–º–∏ —Å–æ–±—Ä–∞–ª—Å—è –¥—Ä–∞–∫–æ–Ω–∞ –≤–∞–ª–∏—Ç—å?"';
  }
}

function fightSlime() {
  fighting = 0;
  goFight();
}

function fightBeast() {
  fighting = 1;
  goFight();
}

function fightDragon() {
  fighting = 2;
  goFight();
}

function goFight() {
  update(locations[3]);
  monsterHealth = monsters[fighting].health;
  monsterStats.style.display = "block";
  monsterName.innerText = monsters[fighting].name;
  monsterHealthText.innerText = monsterHealth;
}

function attack() {
  text.innerText = monsters[fighting].name + " –∞—Ç–∞–∫—É–µ—Ç!";
  text.innerText += " –í—ã –∞—Ç–∞–∫—É–µ—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É—è " + weapons[currentWeapon].name + ".";
  health -= getMonsterAttackValue(monsters[fighting].level);
  if (isMonsterHit()) {
    monsterHealth -= weapons[currentWeapon].power + Math.floor(Math.random() * xp) + 1;    
  } else {
    text.innerText += " –í—ã –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å.";
  }
  healthText.innerText = health;
  monsterHealthText.innerText = monsterHealth;
  if (health <= 0) {
    lose();
  } else if (monsterHealth <= 0) {
    fighting === 2 ? winGame() : defeatMonster();
  }
  if (Math.random() <= .1 && inventory.length !== 1) {
    text.innerText += " –í–∞—à " + inventory.pop() + " —Å–ª–æ–º–∞–ª—Å—è.";
    currentWeapon--;
  }
}

function getMonsterAttackValue(level) {
  const hit = (level * 5) - (Math.floor(Math.random() * xp));
  console.log(hit);
  return hit > 0 ? hit : 0;
}

function isMonsterHit() {
  return Math.random() > .2 || health < 20;
}

function dodge() {
  text.innerText = "–í—ã —É–∫–ª–æ–Ω—è–µ—Ç–µ—Å—å, –∫–æ–≥–¥–∞ " + monsters[fighting].name + " –∞—Ç–∞–∫—É–µ—Ç.";
}

function defeatMonster() {
  gold += Math.floor(monsters[fighting].level * 6.7);
  xp += monsters[fighting].level;
  goldText.innerText = gold;
  xpText.innerText = xp;
  update(locations[4]);
}

function lose() {
  update(locations[5]);
}

function winGame() {
  update(locations[6]);
}

function restart() {
  xp = 0;
  health = 100;
  gold = 50;
  currentWeapon = 0;
  inventory = ["–†–∂–∞–≤—ã–π –Ω–æ–∂"];
  goldText.innerText = gold;
  healthText.innerText = health;
  xpText.innerText = xp;
  goTown();
}

function easterEgg() {
  update(locations[7]);
}

function pickTwo() {
  pick(2);
}

function pickEight() {
  pick(8);
}

function pick(guess) {
  const numbers = [];
  while (numbers.length < 10) {
    numbers.push(Math.floor(Math.random() * 11));
  }
  text.innerText = "You picked " + guess + ". Here are the random numbers:\n";
  for (let i = 0; i < 10; i++) {
    text.innerText += numbers[i] + "\n";
  }
  if (numbers.includes(guess)) {
    text.innerText += "Right! You win 20 gold!";
    gold += 20;
    goldText.innerText = gold;
  } else {
    text.innerText += "Wrong! You lose 10 health!";
    health -= 10;
    healthText.innerText = health;
    if (health <= 0) {
      lose();
    }
  }
}

// for commit